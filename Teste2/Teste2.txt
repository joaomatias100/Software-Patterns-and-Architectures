1- Neste exercício, teremos a classe Contacto que irá definir os atributos de qualquer objeto que a instancie (neste caso são apenas o nome, que é string, e um isPremium boolean para verificar se o utilizador é pagante). De seguida, definimos a interface ContactListInterface com apenas o método getContact, que irá ser implementado pelas classes ContactList e ContactListProxy. ContactList será apenas a lista de contactos que será acedida, com métodos implementados como addContact e getContact que definem essas funcionalidades. Já o ContactListProxy define que restrições de acesso existem para a ContactList, mais especificamente no getContact, em que se define que para o programa ser capaz de dar get a um determinado objeto de contacto tem de cumprir a restrição de ele ser premium (isPremium = true) e de haver não haver mais do que 15 objetos na classe. Depois temos o main onde se instanciam alguns contactos e se verifica o comportamento desejado.


2- Visto que neste implementação se iriam usar muitas instâncias (soldados), isto poderia gerar um problema de performance enorme. Como tal, o Flyweight poderia ajudar a resolver esta situação, uma vez que permite armazenar cada objeto num estado intrínseco (inalterável mediante o contexto, como por exemplo a farda e estrutura física) e extrínseco (alterável mediante o contexto, como a posição de spawn). Aqui iria-se criar a Classe Soldado com atributos próprios de cada soldado e a Classe SoldadoFactory, com a lista de todos os objetos soldados já criados. À medida que cada soldado vai morrendo vai sendo removido da lista e, acima de tudo, permite que atributos iguais sejam guardados de forma centralizada e acessível, providenciando uma melhor gestão de memória.
 